<#@ template debug="false" hostspecific="true" language="C#" #>
<#@ assembly name="System.Core" #>
<#@ assembly name="System.Configuration" #>
<#@ assembly name="EnvDTE" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Configuration" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="System.Text.RegularExpressions" #> 
<#@ output extension=".cs" #>
<#
        var host = (IServiceProvider)Host;
        var env = (EnvDTE.DTE)host.GetService(typeof(EnvDTE.DTE));
        var project = (EnvDTE.Project)((Array)env.ActiveSolutionProjects).GetValue(0);
        var configFilePath = System.IO.Path.Combine(System.IO.Directory.GetParent(env.Solution.FileName).FullName,"Benchmarks\\Applications\\Indexing\\Benchmark\\app.config");
		//foreach (EnvDTE.ProjectItem item in project.ProjectItems)
        //{
        //    if (Regex.IsMatch(item.Name, "(app|web).config", RegexOptions.IgnoreCase))
        //        configFilePath = item.get_FileNames(0);
        //}

        var configFile = new ExeConfigurationFileMap();
        configFile.ExeConfigFilename = configFilePath;
        var config = ConfigurationManager.OpenMappedExeConfiguration(
            configFile, ConfigurationUserLevel.None);

			System.Configuration.AppSettingsSection appSettings =
                (System.Configuration.AppSettingsSection)config.GetSection("appSettings");

		int N = int.Parse(appSettings.Settings["NumberOfGrainTypesInScenario5"].Value);
#>

using Microsoft.Azure.Documents;
using Orleans.Indexing;
using Orleans.Providers;
using Orleans.Runtime;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace Orleans.Benchmarks.Indexing.Scenario05
{

    // ------------------------------------------------------------------------
    // --- Baseline (persisted) Player Grain without index --------------------
    // ------------------------------------------------------------------------

    #region Baseline (persisted) Player Grain without index
    [Serializable]
    public class PlayerGrainState
    {
        public string Email { get; set; }

        public int Score { get; set; }

        public string Location { get; set; }
    }

    public abstract class AbstractPlayerGrain : Grain<PlayerGrainState>, IPlayerInterface
    {
        private Logger logger;

        public string Email { get { return State.Email; } }
        public string Location { get { return State.Location; } }
        public int Score { get { return State.Score; } }

        public override Task OnActivateAsync()
        {
            logger = GetLogger("PlayerGrain-" + IdentityString);
            return base.OnActivateAsync();
        }

        public Task<string> GetLocation()
        {
            return Task.FromResult(Location);
        }

        public async Task<string> SetLocation(string location)
        {
            State.Location = location;
            // try... catch because sometimes AzureTable chokes on etag violations
            // returning false will cause the client to re-issue the update
            try
            {
                await base.WriteStateAsync();
                return ""; 
            }
            catch (DocumentClientException de)
            {
                if ((int)de.StatusCode == 429 || (int)de.StatusCode == 449)
                {
                    await Task.Delay(de.RetryAfter);
					return "<$>";
                } else {
					return de.Message + de.ToString();
				}
            }
			catch (Exception e)
            {
                await base.ReadStateAsync();
                return e.Message + e.ToString();
            }
        }

        public Task<int> GetScore()
        {
            return Task.FromResult(Score);
        }

        public async Task<bool> SetScore(int score)
        {
            State.Score = score;
            //return TaskDone.Done;

            // try... catch because sometimes AzureTable chokes on etag violations
            // returning false will cause the client to re-issue the update
            try
            {
                await base.WriteStateAsync();
                return true;
            }
            catch (DocumentClientException de)
            {
                if ((int)de.StatusCode == 429 || (int)de.StatusCode == 449)
                {
                    await Task.Delay(de.RetryAfter);
                }
                await base.ReadStateAsync();
                return false;
            }
            catch (Exception)
            {
                await base.ReadStateAsync();
                return false;
            }
        }

        public Task<string> GetEmail()
        {
            return Task.FromResult(Email);
        }

        public async Task<bool> SetEmail(string email)
        {
            State.Email = email;
            //return TaskDone.Done;

            // try... catch because sometimes AzureTable chokes on etag violations
            // returning false will cause the client to re-issue the update
            try
            {
                await base.WriteStateAsync();
                return true;
            }
            catch (DocumentClientException de)
            {
                if ((int)de.StatusCode == 429 || (int)de.StatusCode == 449)
                {
                    await Task.Delay(de.RetryAfter);
                }
                await base.ReadStateAsync();
                return false;
            }
            catch (Exception)
            {
                await base.ReadStateAsync();
                return false;
            }
        }
        public Task LogSilo(string mode)
        {
            Logger log = GetLogger();
            log.TrackTrace("IndexBenchmark: PlayerGrain: mode = " + mode + "; silo = " + base.RuntimeIdentity, Severity.Info);

            return TaskDone.Done;
        }

    }
	
	<# for(int i = 1 ; i <= N; ++i) { #>
	[StorageProvider(ProviderName = "BenchmarkStore")]
    public class PlayerGrain<#= i #> : AbstractPlayerGrain, IPlayerGrain<#= i #>
    {
    }
	<# } #>

    #endregion


    // ------------------------------------------------------------------------
    // --- Abstract Indexed Player Grain that implements common methods -------
    // ------------------------------------------------------------------------

    #region Abstract Player Grain that implements common methods
    public abstract class AbstractIndexedPlayerGrainNonFaultTolerant<TState, TProps> : IndexableGrainNonFaultTolerant<TState, TProps>, IPlayerInterface where TState : PlayerState where TProps : new()
    {
        private Logger logger;

        public string Email { get { return State.Email; } }
        public string Location { get { return State.Location; } }
        public int Score { get { return State.Score; } }

        public override Task OnActivateAsync()
        {
            logger = GetLogger("PlayerGrain-" + IdentityString);
            return base.OnActivateAsync();
        }

        public Task<string> GetLocation()
        {
            return Task.FromResult(Location);
        }

        public async Task<string> SetLocation(string location)
        {
            State.Location = location;
            // try... catch because sometimes AzureTable chokes on etag violations
            // returning false will cause the client to re-issue the update
            try
            {
                await base.WriteStateAsync();
                return ""; 
            }
            catch (DocumentClientException de)
            {
                if ((int)de.StatusCode == 429 || (int)de.StatusCode == 449)
                {
                    await Task.Delay(de.RetryAfter);
					return "<$>";
                } else {
					return de.Message + de.ToString();
				}
            }
			catch (Exception e)
            {
                await base.ReadStateAsync();
                return e.Message + e.ToString();
            }
        }

        public Task<int> GetScore()
        {
            return Task.FromResult(Score);
        }

        public async Task<bool> SetScore(int score)
        {
            State.Score = score;

            // try... catch because sometimes AzureTable chokes on etag violations
            // returning false will cause the client to re-issue the update
            try
            {
                await base.WriteStateAsync();
                return true;
            }
            catch (DocumentClientException de)
            {
                if ((int)de.StatusCode == 429 || (int)de.StatusCode == 449)
                {
                    await Task.Delay(de.RetryAfter);
                }
                await base.ReadStateAsync();
                return false;
            }
            catch (Exception)
            {
                await base.ReadStateAsync();
                return false;
            }
        }

        public Task<string> GetEmail()
        {
            return Task.FromResult(Email);
        }

        public async Task<bool> SetEmail(string email)
        {
            State.Email = email;

            // try... catch because sometimes AzureTable chokes on etag violations
            // returning false will cause the client to re-issue the update
            try
            {
                await base.WriteStateAsync();
                return true;
            }
            catch (DocumentClientException de)
            {
                if ((int)de.StatusCode == 429 || (int)de.StatusCode == 449)
                {
                    await Task.Delay(de.RetryAfter);
                }
                await base.ReadStateAsync();
                return false;
            }
            catch (Exception)
            {
                await base.ReadStateAsync();
                return false;
            }
        }
        public Task LogSilo(string mode)
        {
            Logger log = GetLogger();
            log.TrackTrace("IndexBenchmark: PlayerGrain: mode = " + mode + "; silo = " + base.RuntimeIdentity, Severity.Info);

            return TaskDone.Done;
        }

    }
    #endregion


    // ------------------------------------------------------------------------
    // --- Abstract Fault Tolerant Indexed Player Grain that implements common methods -------
    // ------------------------------------------------------------------------

    #region Abstract Player Grain that implements common methods
    public abstract class AbstractIndexedPlayerGrainFaultTolerant<TState, TProps> : IndexableGrain<TState, TProps>, IPlayerInterface where TState : PlayerState where TProps : new()
    {
        private Logger logger;

        public string Email { get { return State.Email; } }
        public string Location { get { return State.Location; } }
        public int Score { get { return State.Score; } }

        public override Task OnActivateAsync()
        {
            logger = GetLogger("PlayerGrain-" + IdentityString);
            return base.OnActivateAsync();
        }

        public Task<string> GetLocation()
        {
            return Task.FromResult(Location);
        }

        public async Task<string> SetLocation(string location)
        {
            State.Location = location;
            // try... catch because sometimes AzureTable chokes on etag violations
            // returning false will cause the client to re-issue the update
            try
            {
                await base.WriteStateAsync();
                return ""; 
            }
            catch (DocumentClientException de)
            {
                if ((int)de.StatusCode == 429 || (int)de.StatusCode == 449)
                {
                    await Task.Delay(de.RetryAfter);
					return "<$>";
                } else {
					return de.Message + de.ToString();
				}
            }
			catch (Exception e)
            {
                await base.ReadStateAsync();
                return e.Message + e.ToString();
            }
        }

        public Task<int> GetScore()
        {
            return Task.FromResult(Score);
        }

        public async Task<bool> SetScore(int score)
        {
            State.Score = score;

            // try... catch because sometimes AzureTable chokes on etag violations
            // returning false will cause the client to re-issue the update
            try
            {
                await base.WriteStateAsync();
                return true;
            }
            catch (DocumentClientException de)
            {
                if ((int)de.StatusCode == 429 || (int)de.StatusCode == 449)
                {
                    await Task.Delay(de.RetryAfter);
                }
                await base.ReadStateAsync();
                return false;
            }
            catch (Exception)
            {
                await base.ReadStateAsync();
                return false;
            }
        }

        public Task<string> GetEmail()
        {
            return Task.FromResult(Email);
        }

        public async Task<bool> SetEmail(string email)
        {
            State.Email = email;

            // try... catch because sometimes AzureTable chokes on etag violations
            // returning false will cause the client to re-issue the update
            try
            {
                await base.WriteStateAsync();
                return true;
            }
            catch (DocumentClientException de)
            {
                if ((int)de.StatusCode == 429 || (int)de.StatusCode == 449)
                {
                    await Task.Delay(de.RetryAfter);
                }
                await base.ReadStateAsync();
                return false;
            }
            catch (Exception)
            {
                await base.ReadStateAsync();
                return false;
            }
        }
        public Task LogSilo(string mode)
        {
            Logger log = GetLogger();
            log.TrackTrace("IndexBenchmark: PlayerGrain: mode = " + mode + "; silo = " + base.RuntimeIdentity, Severity.Info);

            return TaskDone.Done;
        }

    }
    #endregion

    // ------------------------------------------------------------------------
    // --- (persisted) Player Grain with 1 A-index ------------------------------
    // ------------------------------------------------------------------------

    #region (persisted) Player Grain with 1 A-index

    [Serializable]
    public class IndexedPlayerAIndexGrainState : IndexedPlayerAIndexProperties, PlayerState
    {
        public string Email { get; set; }
    }
	
	<# for(int i = 1 ; i <= N; ++i) { #>
    [StorageProvider(ProviderName = "BenchmarkStore")]
    public class IndexedPlayerAIndexGrain<#= i #> : AbstractIndexedPlayerGrainNonFaultTolerant<IndexedPlayerAIndexGrainState, IndexedPlayerAIndexProperties>, IIndexedPlayerAIndexGrain<#= i #>
    {
    }
	<# } #>
    #endregion

    // ------------------------------------------------------------------------
    // --- (persisted) Player Grain with 1 I-index ----------------------------
    // ------------------------------------------------------------------------

    #region (persisted) Player Grain with 1 I-index
	
	<# for(int i = 1 ; i <= N; ++i) { #>
    [Serializable]
    public class IndexedPlayerIIndexGrainState<#= i #> : IndexedPlayerIIndexProperties<#= i #>, PlayerState
    {
        public string Email { get; set; }
    }
	<# } #>
	
	<# for(int i = 1 ; i <= N; ++i) { #>
    [StorageProvider(ProviderName = "BenchmarkStore")]
    public class IndexedPlayerIIndexGrain<#= i #> : AbstractIndexedPlayerGrainNonFaultTolerant<IndexedPlayerIIndexGrainState<#= i #>, IndexedPlayerIIndexProperties<#= i #>>, IIndexedPlayerIIndexGrain<#= i #>
    {
    }
	<# } #>
    #endregion

    // ------------------------------------------------------------------------
    // --- (persisted) Player Grain with 1 Fault Tolerant I-index ----------------------------
    // ------------------------------------------------------------------------

    #region (persisted) Player Grain with 1 Fault Tolerant I-index
	
	<# for(int i = 1 ; i <= N; ++i) { #>
    [Serializable]
    public class IndexedPlayerFTIIndexGrainState<#= i #> : IndexedPlayerFTIIndexProperties<#= i #>, PlayerState
    {
        public string Email { get; set; }
    }
	<# } #>
	
	<# for(int i = 1 ; i <= N; ++i) { #>
    [StorageProvider(ProviderName = "BenchmarkStore")]
    public class IndexedPlayerFTIIndexGrain<#= i #> : AbstractIndexedPlayerGrainFaultTolerant<IndexedPlayerFTIIndexGrainState<#= i #>, IndexedPlayerFTIIndexProperties<#= i #>>, IIndexedPlayerFTIIndexGrain<#= i #>
    {
    }
	<# } #>
    #endregion

    // ------------------------------------------------------------------------
    // --- (persisted) Player Grain with 1 DSM-index ----------------------------
    // ------------------------------------------------------------------------

    #region (persisted) Player Grain with 1 DSM-index

    [Serializable]
    public class IndexedPlayerDSMIndexGrainState : IndexedPlayerDSMIndexProperties, PlayerState
    {
        public string Email { get; set; }
    }
	
	<# for(int i = 1 ; i <= N; ++i) { #>
    [StorageProvider(ProviderName = "DocumentDBStore")]
    public class IndexedPlayerDSMIndexGrain<#= i #> : AbstractIndexedPlayerGrainNonFaultTolerant<IndexedPlayerDSMIndexGrainState, IndexedPlayerDSMIndexProperties>, IIndexedPlayerDSMIndexGrain<#= i #>
    {
    }
	<# } #>
    #endregion

}
